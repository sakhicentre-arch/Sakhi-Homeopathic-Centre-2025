// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patients      Patient[]
  appointments  Appointment[]
  consultations Consultation[]

  @@map("users")
}

// Clinic model
model Clinic {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  phone       String?
  email       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patients      Patient[]
  appointments  Appointment[]
  consultations Consultation[]

  @@map("clinics")
}

// Patient model
model Patient {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  phone       String
  address     String?
  dateOfBirth DateTime?
  gender      Gender?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clinic        Clinic         @relation(fields: [clinicId], references: [id])
  clinicId      Int
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  appointments  Appointment[]
  consultations Consultation[]

  @@map("patients")
}

// Appointment model
model Appointment {
  id          Int               @id @default(autoincrement())
  date        DateTime
  time        String
  duration    Int               @default(30) // in minutes
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  patient      Patient      @relation(fields: [patientId], references: [id])
  patientId    Int
  clinic       Clinic       @relation(fields: [clinicId], references: [id])
  clinicId     Int
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  consultation Consultation?

  @@map("appointments")
}

// Consultation model
model Consultation {
  id              Int      @id @default(autoincrement())
  chiefComplaint  String
  symptoms        String?
  diagnosis       String?
  treatmentPlan   String?
  notes           String?
  followUpDate    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  patient       Patient       @relation(fields: [patientId], references: [id])
  patientId     Int
  clinic        Clinic        @relation(fields: [clinicId], references: [id])
  clinicId      Int
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId Int           @unique
  prescriptions Prescription[]

  @@map("consultations")
}

// Prescription model
model Prescription {
  id           Int    @id @default(autoincrement())
  medicine     String
  dosage       String
  frequency    String
  duration     String
  instructions String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  consultationId Int

  @@map("prescriptions")
}

// Remedy model for homeopathic medicines
model Remedy {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  potency     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("remedies")
}

// Enums
enum Role {
  USER
  ADMIN
  DOCTOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
